#!/bin/bash
# https://tina.pm/blog/posts/Setting_up_my_server:_re-installing_on_an_encripted_LVM/
[ "$DEBUG" = '1' ] && set -x
set -eu

# For chroot
LC_ALL=C.UTF-8
LANG=C.UTF-8
XTERM=xterm-color

usage_msg() {
    printf "SYNOPSIS\n\t$(basename $0) [OPTION(s)...] COMMAND [OPTION(s)]\n\n"
    printf "DESCRIPTION\n"
    printf "\tInstall script to install LVM on LUKS on a Kimsufi/OVH server.\n\n"
    printf "OPTIONS\n"
    printf "\t-h                    Display this help message.\n\n"
    printf "COMMANDS\n"
    printf "\tinstall               Start the installation.\n"
    printf "\trescue                Chroot into the install system.\n"
    printf "\tqemu                  Start qemu.\n"
    printf "\tsysmount              Mount the whole system.\n"
    printf "\tunmount               Unmount all devices.\n"
}

main(){
    while getopts h o; do
        case "$o" in
        h)
            usage_msg
            exit 0
            ;;
        \?)
            usage_msg
            exit 1
            ;;
        esac
    done

    shift $(expr $OPTIND - 1)
    cmd=${1:-none}
    test "x$cmd" = "xnone" || shift 1

    if test "x$cmd" = "xinstall"; then
        install "$@"
    elif test "x$cmd" = "xrescue"; then
        rescue "$@"
    elif test "x$cmd" = "xqemu"; then
        qemu "$@"
    elif test "x$cmd" = "xsysmount"; then
        sysmount "$@"
    elif test "x$cmd" = "xunmount"; then
        unmount "$@"
    else
        usage_msg
    fi
}

install(){
    encryptionkey=none
    hostname=none
    domainname=none
    sshpubkey=none
    rootpassword=none
    username=none
    userpassword=none
    address4=none
    gateway4=none
    slash_netmask4=none
    full_netmask4=none
    address6=none
    gateway6=none

    usage_msg(){
        printf "OPTIONS\n"
        printf "\t-e <key>              Disk encryption key.\n"
        printf "\t-n <name>             Host name.\n"
        printf "\t-d <name>             Domain name.\n"
        printf "\t-s <key>              SSH public key.\n"
        printf "\t-r <password>         Root password.\n"
        printf "\t-u <name>             User name.\n"
        printf "\t-p <password>         User password.\n\n"
    }

    while getopts he:n:d:s:r:u:p: o; do
        case "$o" in
        h)
            usage_msg
            exit 0
            ;;
        e)
            encryptionkey=$OPTARG
            ;;
        n)
            hostname=$OPTARG
            ;;
        d)
            domainname=$OPTARG
            ;;
        s)
            sshpubkey=$OPTARG
            ;;
        r)
            rootpassword=$OPTARG
            ;;
        u)
            username=$OPTARG
            ;;
        p)
            userpassword=$OPTARG
            ;;
        \?)
            usage_msg
            exit 1
            ;;
        esac
    done

    shift $(expr $OPTIND - 1)

    input "Make sure you have booted with rescue64-pro. Cancel with CTRL-C if not."
    read answer

    input "All data on /dev/sda will be erased. Do you want to continue? Type \"yes\":"
    read answer
    if ! test "x${answer}" = "xyes"; then
        fail "Aborted by user."
    fi

    # TODO: Use a configuration file instead of options or prompting.

    if test "x$encryptionkey" = "xnone"; then
        input "Enter the encryption key:"
        read -s encryptionkey
    fi

    if test "x$hostname" = "xnone"; then
        input "Enter the host name:"
        read hostname
    fi

    if test "x$domainname" = "xnone"; then
        input "Enter the domain name:"
        read domainname
    fi

    if test "x$sshpubkey" = "xnone"; then
        input "Enter your public ssh key:"
        read sshpubkey
    fi

    if test "x$rootpassword" = "xnone"; then
        input "Enter the root password:"
        read -s rootpassword
    fi

    if test "x$username" = "xnone"; then
        input "Enter your user name:"
        read username
    fi

    if test "x$userpassword" = "xnone"; then
        input "Enter the user password:"
        read -s userpassword
    fi

    if test "x$address4" = "xnone"; then
        input "Enter the IP v4 address, e.g. 1.2.3.4:"
        read -s address4
    fi

    if test "x$slash_netmask4" = "xnone"; then
        input "Enter the IP v4 slashed netmask, e.g. /24:"
        read -s slash_netmask4
    fi

    if test "x$full_netmask4" = "xnone"; then
        input "Enter the IP v4 full netmask, e.g. 255.255.255.0:"
        read -s full_netmask4
    fi

    if test "x$gateway4" = "xnone"; then
        input "Enter the IP v4 gateway, e.g. 1.2.3.254:"
        read -s address4
    fi

    if test "x$address6" = "xnone"; then
        input "Enter the IP v6 address, e.g. 1:2:3:4444::1/64:"
        read -s address4
    fi

    if test "x$gateway6" = "xnone"; then
        input "Enter the IP v6 gateway, e.g. 1:2:3:44ff::1/64:"
        read -s address4
    fi

    info "Installing dependencies"
    apt update
    apt install -y cryptsetup lvm2 debian-archive-keyring debootstrap
    success "Installed dependencies"

    info "Creating the partition table"
    parted --script --align optimal /dev/sda mklabel msdos
    parted /dev/sda --align optimal mkpart primary 0% 512MiB
    parted /dev/sda --align optimal mkpart primary 512MiB 100%
    parted /dev/sda set 1 boot on
    parted /dev/sda print
    success "Created the partition table"

    info "Creating the boot partition /dev/sda1"
    sync
    mkfs.ext4 -F -L boot /dev/sda1
    success "Created the boot partition"

    info "Creating the encrypted partition"
    printf "$encryptionkey" | cryptsetup -q -s 512 -c aes-xts-plain64 luksFormat /dev/sda2 -
    printf "$encryptionkey" | cryptsetup luksOpen /dev/sda2 sda2_crypt --key-file -
    success "Created encrypted partition /dev/sda2"

    info "Creating lvm partitions"
    pvcreate /dev/mapper/sda2_crypt
    vgcreate vg0 /dev/mapper/sda2_crypt
    lvcreate -L 500m -n root vg0
    lvcreate -L 500m -n swap vg0
    lvresize -l 100%FREE -n vg0/root
    lvdisplay

    # actually not necessary to activate again
    vgchange -aay
    mkfs.ext4 -L root /dev/mapper/vg0-root
    mkswap -L swap /dev/mapper/vg0-swap
    parted /dev/sda print
    parted /dev/mapper/vg0-root print
    parted /dev/mapper/vg0-swap print
    success "Created the lvm volumes /dev/mapper/root and /dev/mapper/swap"

    info "Mounting the volumes"
    mkdir -p /target
    mount -v /dev/mapper/vg0-root /target
    mkdir -p /target/boot
    mount -v /dev/sda1 /target/boot
    swapon -v /dev/mapper/vg0-swap
    success "Volumes mounted"

    info "Installing"
    gpg /usr/share/keyrings/debian-archive-keyring.gpg
    debootstrap --arch amd64 buster /target http://debian.mirrors.ovh.net/debian
    success "Installed"

    info "Mounting runtime"
    # necessary for chroot
    mount -v --bind /dev /target/dev
    mount -v --bind /run /target/run
    mount -v -t proc proc /target/proc
    mount -v -t sysfs sys /target/sys
    success "Runtime mounted"

    info "Creating fstab and crypttab"
    uuid="$(cryptsetup luksDump /dev/sda2 | grep UUID | awk '{print $2}')"
    info "Creating /etc/crypttab"
    cat << HERE | tee /target/etc/crypttab
sda2_crypt UUID=$uuid none luks
HERE

    info "Creating /etc/fstab"
    cat << HERE | tee /target/etc/fstab
# file system           mount point type    options                     dump    pass
/dev/sda1               /boot       ext4    rw,nosuid,nodev,relatime    0       2
/dev/mapper/vg0-root    /           ext4    errors=remount-ro,relatime  0       1
/dev/mapper/vg0-swap    none        swap    sw                          0       0
HERE

    chroot /target ln -vsf /proc/mounts /etc/mtab
    success "Created fstab and crypttab"

    info "Creating the network configuration"
    info "Creating /etc/network/interfaces"
    cat << HERE | tee /target/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address $address4$slash_netmask4
    gateway $gateway4
    pre-up /sbin/ip addr flush dev eth0 || true

iface eth0 inet6 static
    address $address6
    post-up /sbin/ip -6 route add $gateway6 dev eth0
    post-up /sbin/ip -6 route add default via 20
HERE

    info "Creating /etc/sysctl.d/local.conf"
    cat << HERE | tee /target/etc/sysctl.d/local.conf
net.ipv6.conf.all.autoconf = 0
net.ipv6.conf.default.autoconf = 0
net.ipv6.conf.eth0.autoconf = 0
net.ipv6.conf.all.accept_ra = 0
net.ipv6.conf.default.accept_ra = 0
net.ipv6.conf.eth0.accept_ra = 0
HERE

    info "Creating /etc/resolv.conf"
    cat << HERE | tee /target/etc/resolv.conf
search $domainname
nameserver 213.186.33.99
nameserver 1.1.1.1
nameserver 1.0.0.1
HERE

    info "Creating /etc/hostname"
    printf "$hostname\n" | tee /target/etc/hostname

    info "Creating /etc/hosts"
    cat << HERE | tee /target/etc/hosts
127.0.0.1       localhost
::1             localhost ip6-localhost ip6-loopback
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters
127.0.1.1       $hostname.$domainname $hostname
HERE
    success "Created the network configuration"

    info "Configuring time"
    printf "0.0 0 0.0\n0\nUTC\n" | tee /target/etc/adjtime
    printf "UTC\n" | tee /target/etc/timezone
    chroot /target dpkg-reconfigure -f noninteractive tzdata
    success "Configured time"

    info "Updating and installing dependencies"
    cat << HERE | tee /target/etc/apt/sources.list
deb     http://debian.mirrors.ovh.net/debian            buster              main non-free contrib
deb-src http://debian.mirrors.ovh.net/debian            buster              main non-free contrib
deb     http://debian.mirrors.ovh.net/debian            buster-updates      main non-free contrib
deb-src http://debian.mirrors.ovh.net/debian            buster-updates      main non-free contrib
deb     http://debian.mirrors.ovh.net/debian            buster-backports    main non-free contrib
deb-src http://debian.mirrors.ovh.net/debian            buster-backports    main non-free contrib
deb     http://debian.mirrors.ovh.net/debian-security   buster/updates      main non-free contrib
deb-src http://debian.mirrors.ovh.net/debian-security   buster/updates      main non-free contrib
HERE

    cat << HERE | tee /target/etc/apt/apt.conf.d/02aptsettings
APT::Install-Recommends "0";
APT::Install-Suggests "0";
HERE

    chroot /target apt update
    DEBIAN_FRONTEND=noninteractive chroot /target \
        apt -y \
        -o Dpkg::Options::="--force-confdef" \
        -o Dpkg::Options::="--force-confold" \
        full-upgrade
    DEBIAN_FRONTEND=noninteractive chroot /target \
        apt -y \
        -o Dpkg::Options::="--force-confdef" \
        -o Dpkg::Options::="--force-confold" \
        install \
        busybox \
        console-setup \
        cryptsetup \
        dropbear \
        grub-pc \
        ifupdown \
        initramfs-tools \
        kbd \
        linux-image-amd64 \
        locales \
        lvm2 \
        makedev \
        ssh \
        initscripts \
        vim \
        less \
        ntpdate \
        sudo \
        ca-certificates \
        zsh \
        tree \
        docker

    info "User configuration"
    info "Adding user $username"
    chroot /target adduser --disabled-password --gecos "" "$username"
    chroot /target adduser "$username" sudo
    chroot /target adduser "$username" adm
    info "Setting passwords for root and $username"
    printf "root:$rootpassword\n" | chroot /target chpasswd
    printf "$username:$userpassword\n" | chroot /target chpasswd
    success "User configured"

    chroot /target locale-gen en_US.UTF-8
    chroot /target dpkg-reconfigure -f noninteractive locales
    success "Updated and installed dependencies"

    info "System initialisation"
    mkdir -p /target/root/.ssh
    chmod 700 /target/root/.ssh
    mkdir -p "/target/home/$username/.ssh"
    chmod 700 "/target/home/$username/.ssh"
    printf "$sshpubkey\n" > /target/root/.ssh/authorized_keys
    printf "$sshpubkey\n" > "/target/home/$username/.ssh/authorized_keys"
    printf "$sshpubkey\n" > /target/etc/dropbear-initramfs/authorized_keys
    sed -i "s/^GRUB_CMDLINE_LINUX=\".*\"/GRUB_CMDLINE_LINUX=\"net.ifnames=0\ biosdevname=0\ ip=$address4::$gateway4:$full_netmask4::eth0:none\"/g" /target/etc/default/grub
    sed -i 's/^#GRUB_TERMINAL=console$/GRUB_TERMINAL=console/' /target/etc/default/grub
    sed -i 's/^#FSCKFIX=no$/FSCKFIX=yes/' /target/etc/default/rcS
    sed -i 's/^#Storage=auto$/Storage=persistent/' /target/etc/systemd/journald.conf
    chroot /target grub-install /dev/sda
    chroot /target update-grub
    chroot /target update-initramfs -u
    success "System initialised"

    info "Unmounting"
    unmount
    success "All done"
    info "Reboot now into hard disk"
}

sysmount(){
    test -b /dev/mapper/sda2_crypt || cryptsetup luksOpen /dev/sda2 sda2_crypt
    vgchange -aay
    mkdir -p /target
    mountpoint -q -- "/target" || mount -v /dev/mapper/vg0-root /target
    mountpoint -q -- "/target/boot" || mount -v /dev/sda1 /target/boot
    mountpoint -q -- "/target/dev" || mount -v --bind /dev /target/dev
    mountpoint -q -- "/target/run" || mount -v --bind /run /target/run
    mountpoint -q -- "/target/proc" || mount -v -t proc proc /target/proc
    mountpoint -q -- "/target/sys" || mount -v -t sysfs sys /target/sys
    swapon -v /dev/mapper/vg0-swap || true
}

unmount(){
    umount -v /target/boot
    umount -v /target/dev
    umount -v /target/run
    umount -v /target/proc
    umount -v /target/sys
    umount -v /target
    swapoff -v -a
    lvchange -an /dev/mapper/vg0-root /dev/mapper/vg0-swap
    cryptsetup luksClose sda2_crypt
}

rescue(){
    info "Starting the recovery"
    sysmount
    success "All set. Opening chroot now."
    chroot /target /bin/bash
    input "Do you want to unmount the volumes? [yN]"
    read answer
    if test "x${answer/[yY]/yes}" = "xyes"; then
        unmount
    fi
    success "All done"
}

qemu(){
    info "Starting qemu"
    info "Connect with vnc to 5900"
    info "To forward the vnc port with ssh: ssh -L 5900:localhost:5900 <root@server>"
    qemu-system-x86_64 \
        -net nic \
        -net user,hostfwd=tcp::80-:80,hostfwd=tcp::443-:443 \
        -m 1024M \
        -localtime \
        -k en-us \
        -usbdevice tablet \
        -smp 4 \
        -hda /dev/sda \
        -boot order=c \
        -vnc :0
}

success () {
    printf "[%b%s%b]\t%s\n" "\033[92m" "OK" "\033[0m" "$1"
}

info () {
    printf "[%b%s%b]\t%s\n" "\033[94m" "INFO" "\033[0m" "$1"
}

warning () {
    printf "[%b%s%b]\t%s\n" "\033[93m" "WARN" "\033[0m" "$1" >&2
}

fail () {
    printf "[%b%s%b]\t%s\n" "\033[91m" "FAIL" "\033[0m" "$1" >&2
    exit 1
}

input () {
    printf "[%b%s%b]\t%s\n" "\033[96m" "INPUT" "\033[0m" "$1"
}

main "$@"
